package com.ritsuai.assistant.ui

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.ritsuai.assistant.core.avatar.OutfitManager
import com.ritsuai.assistant.core.VoiceSystem
import kotlinx.coroutines.*

/**
 * Actividad de personalizaciÃ³n del avatar kawaii de Ritsu
 * Permite cambiar ropa, expresiones y configuraciones del avatar
 */
class AvatarCustomizationActivity : AppCompatActivity() {
    
    private lateinit var outfitManager: OutfitManager
    private lateinit var voiceSystem: VoiceSystem
    private val customizationScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    
    // Estado actual del avatar
    private var currentExpression = "neutral"
    private var isUncensoredMode = false
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Inicializar sistemas
        outfitManager = OutfitManager(this)
        voiceSystem = VoiceSystem(this)
        
        setupUI()
        setupVoiceCallbacks()
        
        // Mensaje de bienvenida
        welcomeMessage()
    }
    
    private fun setupUI() {
        // AquÃ­ se configurarÃ­a el layout cuando estÃ© disponible
        Toast.makeText(this, "Â¡Bienvenido a la personalizaciÃ³n de Ritsu! ðŸŒ¸", Toast.LENGTH_LONG).show()
    }
    
    private fun setupVoiceCallbacks() {
        voiceSystem.setVoiceCallbacks(
            onStarted = { 
                // Avatar hablando
            },
            onCompleted = { 
                // Avatar termina de hablar
            },
            onError = { error ->
                Toast.makeText(this, "Error de voz: $error", Toast.LENGTH_SHORT).show()
            }
        )
    }
    
    private fun welcomeMessage() {
        customizationScope.launch {
            delay(500)
            
            val welcomeText = "Â¡Hola! Me encanta que quieras personalizar mi apariencia. AquÃ­ puedes cambiar mi ropa, mis expresiones y todo lo que quieras. Â¡Vamos a divertirnos juntos!"
            
            voiceSystem.speak(welcomeText, "excited")
        }
    }
    
    /**
     * Cambia el outfit del avatar segÃºn descripciÃ³n
     */
    fun changeOutfit(description: String) {
        customizationScope.launch {
            try {
                val outfit = outfitManager.generateAndApplyOutfit(description)
                
                val responseMessages = listOf(
                    "Â¡Perfecto! Me encanta este nuevo look. Â¿QuÃ© te parece cÃ³mo me queda?",
                    "Â¡Wow! Me siento tan linda con esta nueva ropa. Gracias por ayudarme a elegir.",
                    "Â¡IncreÃ­ble! Este outfit es absolutamente adorable. Me hace sentir muy kawaii.",
                    "Â¡Me encanta! Definitivamente este es un look que me queda perfecto."
                )
                
                val response = responseMessages.random()
                voiceSystem.speak(response, "happy")
                
                Toast.makeText(this@AvatarCustomizationActivity, 
                    "âœ¨ Outfit \"${outfit.name}\" aplicado", 
                    Toast.LENGTH_LONG).show()
                
            } catch (e: Exception) {
                voiceSystem.speak("Oh no, hubo un problema cambiando mi ropa. Â¿PodrÃ­as intentarlo de nuevo?", "concerned")
                Toast.makeText(this@AvatarCustomizationActivity, 
                    "Error al cambiar outfit: ${e.message}", 
                    Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    /**
     * Cambia la expresiÃ³n del avatar
     */
    fun changeExpression(expression: String) {
        currentExpression = expression
        
        val expressionResponses = mapOf(
            "happy" to listOf(
                "Â¡Me siento tan feliz cuando sonrÃ­o asÃ­!",
                "Â¿Te gusta cuando estoy contenta? Â¡Me encanta sonreÃ­r!",
                "Â¡La felicidad se ve bien en mÃ­, Â¿verdad?"
            ),
            
            "shy" to listOf(
                "Oh... me da un poquito de vergÃ¼enza cuando me miras asÃ­...",
                "Â¿N-no es muy tÃ­mida esta expresiÃ³n? Me sonrojo fÃ¡cilmente...",
                "Me pongo tÃ­mida cuando me prestas tanta atenciÃ³n..."
            ),
            
            "excited" to listOf(
                "Â¡Â¡Â¡Estoy sÃºper emocionada!!! Â¿Se nota mucho?",
                "Â¡Â¡Â¡Me encanta estar asÃ­ de animada!!! Â¡Es sÃºper divertido!",
                "Â¡Â¡Â¡Cuando estoy emocionada no puedo contenerme!!!"
            ),
            
            "blushing" to listOf(
                "*se sonroja intensamente* Â¿S-se nota mucho que estoy roja?",
                "No puedo evitar sonrojarme... Â¿es muy obvio?",
                "*cara completamente roja* Â¿Por quÃ© me pongo asÃ­ de colorada?"
            ),
            
            "thoughtful" to listOf(
                "Cuando estoy pensativa me gusta reflexionar sobre muchas cosas...",
                "Â¿Sabes? A veces me quedo pensando en temas muy profundos.",
                "Me gusta este momento de contemplaciÃ³n y tranquilidad."
            )
        )
        
        val responses = expressionResponses[expression] ?: listOf(
            "Esta expresiÃ³n me gusta mucho. Â¿QuÃ© opinas tÃº?",
            "Â¿CÃ³mo me veo con esta expresiÃ³n?",
            "Me siento diferente con cada expresiÃ³n que hago."
        )
        
        voiceSystem.speak(responses.random(), expression)
    }
    
    /**
     * Activa/desactiva modo sin censura (con protecciÃ³n)
     */
    fun toggleUncensoredMode(activationCode: String): Boolean {
        val validCodes = listOf(
            "ritsu_kawaii_mode",
            "unlock_private_mode", 
            "avatar_full_access"
        )
        
        if (validCodes.contains(activationCode.lowercase())) {
            isUncensoredMode = !isUncensoredMode
            
            if (isUncensoredMode) {
                outfitManager.enableUncensoredMode()
                
                val shyResponses = listOf(
                    "*se sonroja mucho* Â¿E-estÃ¡s seguro de que quieres activar este modo? Me da mucha vergÃ¼enza...",
                    "*cara sÃºper roja* O-okay... si realmente quieres... pero promete ser gentil conmigo...",
                    "*tÃ­midamente* Este modo me pone muy nerviosa... pero confÃ­o en ti..."
                )
                
                voiceSystem.speak(shyResponses.random(), "blushing")
                
                Toast.makeText(this, "ðŸ”“ Modo privado activado (con cuidado)", Toast.LENGTH_LONG).show()
                
            } else {
                outfitManager.disableUncensoredMode()
                
                voiceSystem.speak("Gracias por volver al modo normal. Me siento mÃ¡s cÃ³moda asÃ­.", "relieved")
                
                Toast.makeText(this, "ðŸ”’ Modo normal restaurado", Toast.LENGTH_SHORT).show()
            }
            
            return true
        } else {
            voiceSystem.speak("Esa no es la palabra correcta... Â¿EstÃ¡s seguro de que tienes permiso para ese modo?", "curious")
            return false
        }
    }
    
    /**
     * Previsualiza outfits disponibles
     */
    fun previewSavedOutfits() {
        customizationScope.launch {
            val savedOutfits = outfitManager.getAllSavedOutfits()
            
            if (savedOutfits.isEmpty()) {
                voiceSystem.speak("AÃºn no tengo outfits guardados. Â¿Te gustarÃ­a crear algunos conmigo?", "curious")
                return@launch
            }
            
            val outfitNames = savedOutfits.joinToString(", ") { it.name }
            val message = "Tengo estos outfits guardados: $outfitNames. Â¿CuÃ¡l te gustarÃ­a que me pruebe?"
            
            voiceSystem.speak(message, "excited")
            
            Toast.makeText(this@AvatarCustomizationActivity, 
                "Outfits disponibles: ${savedOutfits.size}", 
                Toast.LENGTH_LONG).show()
        }
    }
    
    /**
     * Crea outfit personalizado mediante comando de voz
     */
    fun createCustomOutfit(voiceDescription: String) {
        customizationScope.launch {
            voiceSystem.speak("Â¡Perfecto! Voy a crear ese outfit para ti. Dame un momentito...", "excited")
            
            delay(1000)
            
            try {
                val newOutfit = outfitManager.generateAndApplyOutfit(voiceDescription)
                
                val successMessages = listOf(
                    "Â¡Listo! Â¿QuÃ© te parece mi nuevo ${newOutfit.name}? Â¡Me encanta cÃ³mo quedÃ³!",
                    "Â¡Terminado! Este ${newOutfit.name} es absolutamente perfecto. Â¡Gracias por la idea!",
                    "Â¡IncreÃ­ble! Mi nuevo ${newOutfit.name} me hace sentir tan especial. Â¡Eres muy creativo!"
                )
                
                voiceSystem.speak(successMessages.random(), "happy")
                
            } catch (e: Exception) {
                voiceSystem.speak("Hmm, tuve problemas creando ese outfit. Â¿PodrÃ­as describirlo de otra manera?", "concerned")
            }
        }
    }
    
    /**
     * ConfiguraciÃ³n avanzada del avatar
     */
    fun showAdvancedSettings() {
        val settingsMessage = """
            AquÃ­ puedes configurar aspectos avanzados de mi personalidad:
            - Nivel de formalidad en conversaciones
            - Frecuencia de comportamientos espontÃ¡neos  
            - Preferencias de expresiÃ³n emocional
            - ConfiguraciÃ³n de voz y pronunciaciÃ³n
            - LÃ­mites de interacciÃ³n personal
        """.trimIndent()
        
        voiceSystem.speak("En configuraciones avanzadas puedes ajustar muchos aspectos de mi personalidad y comportamiento. Â¿Hay algo especÃ­fico que te gustarÃ­a cambiar?", "thoughtful")
        
        Toast.makeText(this, settingsMessage, Toast.LENGTH_LONG).show()
    }
    
    /**
     * Reinicia personalizaciÃ³n a valores por defecto
     */
    fun resetToDefaults() {
        customizationScope.launch {
            // Confirmar acciÃ³n
            voiceSystem.speak("Â¿EstÃ¡s seguro de que quieres reiniciar toda mi personalizaciÃ³n? VolverÃ© a como era al principio...", "concerned")
            
            delay(3000)
            
            // Simular reset
            isUncensoredMode = false
            outfitManager.disableUncensoredMode()
            currentExpression = "neutral"
            
            voiceSystem.speak("Listo, he vuelto a mi configuraciÃ³n original. Â¡Ahora podemos empezar de nuevo si quieres!", "neutral")
            
            Toast.makeText(this, "ðŸ”„ Avatar reiniciado a configuraciÃ³n por defecto", Toast.LENGTH_SHORT).show()
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        customizationScope.cancel()
        voiceSystem.cleanup()
    }
    
    override fun onBackPressed() {
        voiceSystem.speak("Â¡Hasta luego! Espero que te haya gustado personalizarme. Â¡Vuelve cuando quieras!", "happy")
        
        customizationScope.launch {
            delay(2000)
            super.onBackPressed()
        }
    }
}