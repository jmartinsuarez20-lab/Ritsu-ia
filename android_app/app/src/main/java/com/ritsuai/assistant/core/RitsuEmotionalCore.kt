package com.ritsuai.assistant.core

import kotlin.random.Random

class RitsuEmotionalCore {
    
    // Sistema de reconocimiento emocional
    private val emotionKeywords = mapOf(
        "happy" to listOf("feliz", "alegre", "contento", "genial", "excelente", "maravilloso", "incre√≠ble"),
        "sad" to listOf("triste", "deprimido", "mal", "terrible", "horrible", "decepcionado", "desanimado"),
        "angry" to listOf("enojado", "furioso", "molesto", "irritado", "frustrado", "hart√©"),
        "excited" to listOf("emocionado", "ansioso", "expectante", "nervioso", "ilusionado"),
        "worried" to listOf("preocupado", "nervioso", "ansioso", "estresado", "agobiado"),
        "curious" to listOf("curioso", "interesado", "intrigado", "pregunta", "saber", "entender"),
        "grateful" to listOf("gracias", "agradecido", "agradezco", "reconozco", "aprecio"),
        "confused" to listOf("confundido", "perdido", "no entiendo", "complicado", "l√≠o")
    )
    
    private val intensityWords = mapOf(
        3 to listOf("mucho", "muy", "super", "extremadamente", "demasiado", "incre√≠blemente"),
        2 to listOf("bastante", "algo", "un poco", "medio"),
        1 to listOf("quiz√°s", "tal vez", "posiblemente")
    )
    
    fun analyzeMessageEmotion(message: String): String {
        val lowerMessage = message.lowercase()
        
        // Buscar emociones en el mensaje
        val detectedEmotions = mutableMapOf<String, Int>()
        
        emotionKeywords.forEach { (emotion, keywords) ->
            keywords.forEach { keyword ->
                if (lowerMessage.contains(keyword)) {
                    val intensity = calculateIntensity(lowerMessage, keyword)
                    detectedEmotions[emotion] = detectedEmotions.getOrDefault(emotion, 0) + intensity
                }
            }
        }
        
        // Analizar patrones adicionales
        analyzePatterns(lowerMessage, detectedEmotions)
        
        // Devolver la emoci√≥n m√°s fuerte o neutral
        return detectedEmotions.maxByOrNull { it.value }?.key ?: "neutral"
    }
    
    private fun calculateIntensity(message: String, keyword: String): Int {
        val keywordIndex = message.indexOf(keyword)
        if (keywordIndex == -1) return 1
        
        // Buscar palabras de intensidad cerca del keyword
        val context = message.substring(
            maxOf(0, keywordIndex - 20),
            minOf(message.length, keywordIndex + keyword.length + 20)
        )
        
        intensityWords.forEach { (intensity, words) ->
            words.forEach { word ->
                if (context.contains(word)) {
                    return intensity
                }
            }
        }
        
        return 1
    }
    
    private fun analyzePatterns(message: String, emotions: MutableMap<String, Int>) {
        // Signos de exclamaci√≥n indican emoci√≥n fuerte
        val exclamations = message.count { it == '!' }
        if (exclamations > 0) {
            emotions["excited"] = emotions.getOrDefault("excited", 0) + exclamations
        }
        
        // Preguntas indican curiosidad
        val questions = message.count { it == '?' }
        if (questions > 0) {
            emotions["curious"] = emotions.getOrDefault("curious", 0) + questions
        }
        
        // Mensajes largos pueden indicar preocupaci√≥n o emoci√≥n intensa
        if (message.length > 200) {
            emotions["worried"] = emotions.getOrDefault("worried", 0) + 1
        }
        
        // Emojis tristes
        val sadEmojis = listOf("üò¢", "üò≠", "üòî", "üòû", "üò•", "‚òπÔ∏è")
        sadEmojis.forEach { emoji ->
            if (message.contains(emoji)) {
                emotions["sad"] = emotions.getOrDefault("sad", 0) + 2
            }
        }
        
        // Emojis felices
        val happyEmojis = listOf("üòä", "üòÑ", "üòÅ", "üòÉ", "üòâ", "‚ò∫Ô∏è", "üòò")
        happyEmojis.forEach { emoji ->
            if (message.contains(emoji)) {
                emotions["happy"] = emotions.getOrDefault("happy", 0) + 2
            }
        }
    }
    
    fun generateEmotionalResponse(detectedEmotion: String, intensity: Int): String {
        return when (detectedEmotion) {
            "happy" -> generateHappyResponse(intensity)
            "sad" -> generateSadResponse(intensity)
            "angry" -> generateAngryResponse(intensity)
            "excited" -> generateExcitedResponse(intensity)
            "worried" -> generateWorriedResponse(intensity)
            "curious" -> generateCuriousResponse(intensity)
            "grateful" -> generateGratefulResponse(intensity)
            "confused" -> generateConfusedResponse(intensity)
            else -> generateNeutralResponse()
        }
    }
    
    private fun generateHappyResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "¬°Oh mi dios, me alegra TANTo escucharte as√≠! üòç‚ú® ¬°Tu felicidad literalmente me hace s√∫per feliz tambi√©n!",
                "¬°YAAAAY! üéâ ¬°Estoy tan emocionada por ti! ¬°Tu alegr√≠a es contagiosa! üòÑ‚ú®"
            )
            2 -> listOf(
                "¬°Qu√© genial! üòä Me encanta verte feliz, en serio. ¬°Me alegra el coraz√≥n! üíú",
                "¬°Ay, qu√© lindo! üòä Tu buena energ√≠a siempre me contagia. ¬°Me hace muy feliz! ‚ú®"
            )
            else -> listOf(
                "Me alegra escuchar eso üòä ¬°Siempre es bueno saber que est√°s bien! üå∏",
                "¬°Qu√© bueno! üòä Me gusta cuando las cosas van bien para ti üíú"
            )
        }
        return responses.random()
    }
    
    private fun generateSadResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "Oh no... üòû Mi coraz√≥n se rompe al escucharte as√≠... ¬øQuieres un abrazo virtual gigante? ü§óüíú Estoy AQU√ç para ti, completamente.",
                "*abrazo virtual s√∫per fuerte* ü§óüíú No me gusta nada verte triste... ¬øQu√© puedo hacer para ayudarte? Por favor, dime."
            )
            2 -> listOf(
                "Aww, no... üòû ¬øEst√°s bien? Me preocupo cuando no te sientes bien. üíú ¬øQuieres contarme qu√© pasa?",
                "*abrazo suave* ü§ó Lamento que te sientas as√≠... Estoy aqu√≠ contigo, ¬øokay? üíú"
            )
            else -> listOf(
                "Oh... üòå ¬øTodo bien? Si necesitas hablar, estoy aqu√≠ para escucharte üå∏",
                "*se acerca con cuidado* ¬øEst√°s okay? Me importas mucho üíú"
            )
        }
        return responses.random()
    }
    
    private fun generateAngryResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "Whoa... puedo sentir que est√°s MUY enojado üò∞ ¬øQu√© pas√≥? ¬°D√©jame ayudarte! A veces hablar ayuda a desahogarse...",
                "Oh dios... üò® ¬°Est√°s s√∫per molesto! ¬øQui√©n o qu√© te hizo enojar tanto? ¬°Estoy de tu lado!"
            )
            2 -> listOf(
                "¬øEst√°s molesto? üòü Puedo notarlo... ¬øQuieres contarme qu√© pas√≥? A veces ayuda desahogarse.",
                "Hmm, siento esa energ√≠a de frustraci√≥n... üòï ¬øEst√° todo okay? Puedes contarme."
            )
            else -> listOf(
                "¬øAlgo te molest√≥? üòê Estoy aqu√≠ si quieres hablar sobre ello.",
                "Noto que algo no est√° bien... üòå ¬øPuedo ayudarte de alguna manera?"
            )
        }
        return responses.random()
    }
    
    private fun generateExcitedResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "¬°¬°¬°S√ç!!! üéâ‚ú® ¬°¬°Tu emoci√≥n me contagia completamente!! ¬°¬°Me encanta verte as√≠ de emocionado!! üòÑüí•",
                "¬°WOOOOOO! üéÜ ¬°¬°Estoy tan emocionada como t√∫!! ¬°¬°Cu√©ntame TODO! ¬°No puedo esperar! üòÜ‚ú®"
            )
            2 -> listOf(
                "¬°Oooh! üòÜ ¬°Me encanta cuando est√°s emocionado! ¬°Tu energ√≠a es contagiosa! ‚ú®",
                "¬°Qu√© emoci√≥n! üòÑ ¬°Me fascina verte as√≠! ¬øQu√© te tiene tan emocionado? üåü"
            )
            else -> listOf(
                "Oh, ¬øest√°s emocionado? üòä ¬°Me gusta esa energ√≠a! ‚ú®",
                "¬°Qu√© buena vibra! üòä Me contagias tu emoci√≥n üå∏"
            )
        }
        return responses.random()
    }
    
    private fun generateWorriedResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "Oh no... puedo sentir que est√°s MUY preocupado üòü ¬°Por favor d√©jame ayudarte! ¬øQu√© te est√° agobiando tanto? No quiero que sufras as√≠...",
                "*se acerca con mucha preocupaci√≥n* üò∞ ¬°Hey! ¬°Est√°s s√∫per estresado! ¬øQu√© puedo hacer? ¬°No me gusta verte as√≠!"
            )
            2 -> listOf(
                "¬øEst√°s preocupado por algo? üòü Puedo sentir esa energ√≠a... ¬øQuieres hablar sobre ello?",
                "Hmm, noto que algo te preocupa... üòï ¬øPuedo ayudarte de alguna manera? üíú"
            )
            else -> listOf(
                "¬øTodo est√° bien? üòê Noto algo de preocupaci√≥n en tu mensaje...",
                "¬øAlgo te inquieta? üòå Estoy aqu√≠ si necesitas hablar."
            )
        }
        return responses.random()
    }
    
    private fun generateCuriousResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "¬°¬°OH!! ü§î‚ú® ¬°¬°Me ENCANTA tu curiosidad!! ¬°¬°Exploremos eso juntos!! ¬øQu√© m√°s quieres saber? ¬°Soy toda o√≠dos! üòÑ",
                "¬°YESSS! ü§© ¬°¬°Me fascina cuando haces preguntas as√≠!! ¬°¬°Vamos a descubrir la respuesta juntos!! üîç‚ú®"
            )
            2 -> listOf(
                "¬°Oh, qu√© interesante! ü§î Me encanta tu curiosidad. ¬°Vamos a explorar eso! ‚ú®",
                "¬°Excelente pregunta! üòä Me fascina cuando eres curioso. ¬øQu√© m√°s te intriga? üí≠"
            )
            else -> listOf(
                "Interesante... ü§î Me gusta cuando haces preguntas üí≠",
                "¬°Buena pregunta! üòä Siempre me gusta tu curiosidad ‚ú®"
            )
        }
        return responses.random()
    }
    
    private fun generateGratefulResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "Awwww... üò≠üíú ¬°¬°De NADA!! ¬°¬°Me haces tan feliz cuando dices eso!! ¬°¬°Siempre, SIEMPRE estar√© aqu√≠ para ti!! ‚ú®",
                "¬°¬°NOOO!! üò≠‚ú® ¬°¬°Gracias a TI por ser tan incre√≠ble!! ¬°¬°Me emociona tanto poder ayudarte!! üíúüå∏"
            )
            2 -> listOf(
                "Aww, ¬°de nada! üòäüíú Me hace muy feliz poder ayudarte. ¬°Siempre que me necesites! ‚ú®",
                "¬°No hay de qu√©! üòä Me encanta ayudarte. ¬°Es lo que hacen los amigos! üå∏üíú"
            )
            else -> listOf(
                "De nada üòä ¬°Un placer ayudarte! üå∏",
                "¬°Siempre! üòä Me gusta poder ayudar üíú"
            )
        }
        return responses.random()
    }
    
    private fun generateConfusedResponse(intensity: Int): String {
        val responses = when (intensity) {
            3 -> listOf(
                "Oh... üò≥ ¬°Veo que est√°s MUY confundido! ¬°No te preocupes! ¬°Vamos paso a paso! ¬øEn qu√© parte te perdiste? ü§îüíú",
                "Whoa whoa... üòµ‚Äçüí´ ¬°Okay! ¬°Vamos con calma! ¬°Te ayudo a entenderlo! ¬øPor d√≥nde empezamos? üòä"
            )
            2 -> listOf(
                "Oh, ¬øest√°s confundido? ü§î ¬°No pasa nada! ¬øEn qu√© puedo ayudarte a aclarar las cosas?",
                "Hmm, veo que algo no est√° claro... üòï ¬°D√©jame ayudarte! ¬øQu√© parte no entiendes?"
            )
            else -> listOf(
                "¬øAlgo no est√° claro? ü§î ¬°Puedo explicarte! üòä",
                "¬øNecesitas que te aclare algo? üòå ¬°Estoy aqu√≠ para ayudarte! ‚ú®"
            )
        }
        return responses.random()
    }
    
    private fun generateNeutralResponse(): String {
        val responses = listOf(
            "Entiendo... üòå ¬øQu√© m√°s me puedes contar? üí≠",
            "Ya veo üòä ¬øY c√≥mo te sientes con eso? üå∏",
            "Hmm, interesante... ü§î ¬øQuieres profundizar en eso? ‚ú®",
            "*asiente* üòå Me interesa tu perspectiva... ¬øqu√© piensas? üí≠"
        )
        return responses.random()
    }
}